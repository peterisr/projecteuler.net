/**
 * Consider all integer combinations of ab for 2 <= a <= 5 and 2 <= b <= 5:
 *
 *     2^2=4, 2^3=8, 2^4=16, 2^5=32
 *     3^2=9, 3^3=27, 3^4=81, 3^5=243
 *     4^2=16, 4^3=64, 4^4=256, 4^5=1024
 *     5^2=25, 5^3=125, 5^4=625, 5^5=3125
 *
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 *
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by ab for 2 <= a <= 100 and 2 <= b <= 100?
 *
 * @task 029
 * @answer 9183
 */
#include "../projecteuler.h"

typedef bitset<260> rep;

rep getRepresentation(UI base, UI power) {
    VUI primes = getPrimeList(100);

    vector< pair<UI, UI> > factors = getPrimeFactors(base);
    UI factorPowers[100];
    memset(factorPowers, 0, sizeof factorPowers);
    F(i,factors.size()) {
        factorPowers[factors[i].first] = factors[i].second * power;
    }

    rep result = 0;
    F(i,primes.size()) {
        //TRACE(factorPowers[primes[i]]);
        result |= factorPowers[primes[i]];
        result <<= 10;
    }

    return result;
}

struct compareRep {
    bool operator() (const rep &a, const rep &b) {
        for (int i = 260 - 1; i >= 0; i--) {
            if (a[i] == b[i]) {
                continue;
            }

            return (a[i] > b[i]);
        }

        return false;
    }
};

UI solve029() {
    const UI to = 100;

    UI result = 0;

    set<rep, compareRep> used;
    FOR(a,2,to + 1) {
        FOR(b,2,to + 1) {
            rep r = getRepresentation(a, b);
            if (!INSET(used, r)) {
                used.insert(r);
                result++;
            }
        }
    }

    return result;
}

int main() {
    cout << solve029();
    return 0;
}
